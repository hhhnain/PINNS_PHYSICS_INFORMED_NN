import torch
import torch.nn as nn
import matplotlib.pyplot as plt
device = torch.device('cpu')

class ODE_2nd(nn.Module):
    def __init__(self):
        super().__init__()
        self.hidden = nn.Linear(1,10)
        self.final = nn.Linear(10,1)
    
    def forward(self,x):
        activated = torch.sigmoid(self.hidden(x))
        output = self.final(activated)
        return output
    
NN = ODE_2nd()
NN = NN.to(device)

def f(x):
    return - torch.ones(x.shape[0],x.shape[1])

def loss(x):
    x.requires_grad = True
    y = NN(x)
    dy_dx = torch.autograd.grad(y.sum(),x,create_graph=True)[0]
    d2y_dx2 = torch.autograd.grad(dy_dx.sum(),x,create_graph=True)[0]
    diff_2 = torch.mean( (d2y_dx2- f(x))**2 ) + (y[0, 0] - 0.)**2 + (y[-1, 0] - 0.)**2
    return diff_2

optimizer = torch.optim.LBFGS(NN.parameters())
x = torch.linspace(0, 1, 100)[:, None]
def closure():
    optimizer.zero_grad()
    l = loss(x)
    l.backward()
    return l
epochs = 10
for i in range(epochs):
    optimizer.step(closure)    
def exact(x):
    return -1/2 * x **2 + 1/2 *x
x = torch.linspace(0,1,100).unsqueeze(1)
y = NN(xx).detach()

plt.plot(x,y,label='predicted')
plt.plot(x,exact(x),label='exact')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.grid()

